# -*- coding: utf-8 -*-
"""assigment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bpG2CwOiu3he_wlqutwnxp44EGl8PTD0
"""

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import cv2

from keras.datasets import fashion_mnist
(trainX, trainy), (testX, testy) = fashion_mnist.load_data()

trainX.shape

trainy.shape

testX

testy

from google.colab.patches import cv2_imshow

cv2_imshow(trainX[0])

plt.imshow(trainX[0])

plt.figure(figsize=(10,10))
for i in range(25):
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.imshow(trainX[i],cmap='gray')
  plt.xlabel(trainy[i])

trainX[0]

from keras.utils import to_categorical

trainy=to_categorical(trainy)
testy=to_categorical(testy)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,Dropout

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(10, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.fit(trainX, trainy, epochs=5, batch_size=32, validation_data=(testX, testy))

y_pred=model.predict(testX)

y_pred=model.predict(np.array(trainX[0], dtype='float32').reshape(1,28,28,1))

print(np.argmax(y_pred[0]))

from google.colab import files
import io
from PIL import Image

image_path='/content/images (2).jpeg'
new_image=Image.open(image_path).convert('L')
new_image=new_image.resize((28,28))
new_image=np.array(new_image)
new_image=new_image.reshape(1,28,28,1).astype('float32')

predicition=model.predict(new_image)
predicted_digit=np.argmax(predicition)
print(f"predicted_digit{predicted_digit}")

model1 = Sequential()
model1.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model1.add(MaxPooling2D((2, 2)))
model1.add(Conv2D(64, (3, 3), activation='relu'))
model1.add(MaxPooling2D((2, 2)))
model1.add(Conv2D(64, (3, 3), activation='relu'))
model1.add(Flatten())
model1.add(Dense(64, activation='relu'))
model1.add(Dropout(0.2))
model1.add(Dense(65, activation='relu'))
model1.add(Dropout(0.2))
model1.add(Dense(66, activation='relu'))
model1.add(Dropout(0.2))
model1.add(Dense(10, activation='softmax'))

model1.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model1.fit(trainX, trainy, epochs=5, batch_size=32, validation_data=(testX, testy))

def processed_image(img):
  img=cv2.resize(img,(64,64))
  img=np.expand_dims(img,axis=0)
  return img

from ast import Return
def predict_dress(img):
  processed_img = processed_image(img)
  predictions=model.predict(processed_img)
  if predictions[0][0]==0:
    return  'T-shirt/top'
  elif predictions[0][0]==1:
    return  'Trouser'
  elif predictions[0][0]==2:
    return  'Pullover'
  elif predictions[0][0]==3:
    return  'Dress'
  elif predictions[0][0]==4:
    return  'Coat'
  elif predictions[0][0]==5:
    return  'Sandal'
  elif predictions[0][0]==6:
    return  'Shirt'
  elif predictions[0][0]==7:
    return  'Sneaker'
  elif predictions[0][0]==8:
    return  'Bag'
  elif predictions[0][0]==9:
    return 'Ankle boot'
  else:
    return 'Invaild Opition'

from google.colab import files
from PIL import Image
from google.colab import files
from PIL import Image
import cv2
import numpy as np

image_path = '/content/images (2).jpeg'

def processed_image(img):
  img=Image.open(image_path).convert('L')
  img = np.array(img)
  img = cv2.resize(img, (28, 28))
  img = np.expand_dims(img, axis=0)
  img = np.expand_dims(img, axis=-1)
  img = img.astype('float32')
  return img

img = cv2.imread(image_path)

processed_image(img)







predict_dress(img)

